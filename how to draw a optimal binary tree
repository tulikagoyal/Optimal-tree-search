Given a sorted array keys[0.. n-1] of search keys and an array freq[0.. n-1] of frequency counts, where freq[i] is the number of searches to keys[i]. Construct a binary search tree of all keys such that the total cost of all the searches is as small as possible.
Let us first define the cost of a BST. The cost of a BST node is level of that node multiplied by its frequency. Level of root is 1

SOLUTION I
#include <bits/stdc++.h>
using namespace std;
int mincost(int keys[], int freq[]){
    int n=5;
    int T[n][n];
    for(int i=0;i<n;i++){
        T[i][i]=freq[i]; //for length =1
    }
    for(int len=2;len<=n;len++){
        for(int i=0;i<n;i++){
            int j=i+len-1;
            int sum=0;
            for(int x=i;x<=j;x++){
                sum +=T[x][x];
            }
            T[i][j] = INT_MAX;
            
            for(int root=i;root<=j;root++){
                int val;
                val=sum+(root-1<i?0:T[i][root-1])+(root+1>j?0:T[root+1][j]);
                if(val<T[i][j]){
                    T[i][j]=val;
                }
            }
        }
    }
    return T[0][n-1];
}
int main(){
    int key[]={10,12,20,35,46};
    int freq[]={34,8,50,21,16};
    int result=mincost(key,freq);
    cout<<result;
}
